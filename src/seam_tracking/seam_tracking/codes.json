["def fn(x, y, *args):\n    if len(x) == 0 or len(y) == 0 or len(x) != len(y):\n        return [], []\n    else:\n        return [x[0] * 1.], [y[0] * 1.]\n", "def fn(x, y, *args):\n    if len(x) == 0 or len(y) == 0 or len(x) != len(y):\n        return [], []\n    else:\n        return [x[-1] * 1.], [y[-1] * 1.]\n", "from numpy.polynomial.polynomial import polyfit\n\ndef fn(x, y, *args):\n    return Calculate(x, y, 50, 5)\n\ndef Calculate(x, y, num, delta):\n    index = y.index(max(y))\n    if index - num < 0 or index + num > len(y):\n        return [], []\n    b1, m1 = polyfit(x[index - num : index - delta], y[index - num : index - delta], 1)\n    b2, m2 = polyfit(x[index + delta : index + num], y[index + delta : index + num], 1)\n    try:\n        px = (b2 - b1) / (m1 - m2)\n        py = px * m1 + b1\n    except:\n        return [], []\n    else:\n        return [px], [py]\n", "from numpy.polynomial.polynomial import polyfit\n\ndef fn(x, y, *args):\n    return Calculate(x, y, 50, 5)\n\ndef Calculate(x, y, num, delta):\n    index = y.index(min(y))\n    if index - num < 0 or index + num > len(y):\n        return [], []\n    b1, m1 = polyfit(x[index - num : index - delta], y[index - num : index - delta], 1)\n    b2, m2 = polyfit(x[index + delta : index + num], y[index + delta : index + num], 1)\n    try:\n        px = (b2 - b1) / (m1 - m2)\n        py = px * m1 + b1\n    except:\n        return [], []\n    else:\n        return [px], [py]\n", "def fn(x, y, *args):\n    if len(y) > 20:\n        ly = [y[i] * 2 - y[i - 5] - y[i + 5] for i in range(5, len(y) - 5)]\n        index = ly.index(max(ly))\n        return [x[index + 5] * 1.], [y[index + 5] * 1.]\n    else:\n        return [], []\n", "def fn(x, y, *args):\n    if len(y) > 20:\n        ly = [y[i] * 2 - y[i - 5] - y[i + 5] for i in range(5, len(y) - 5)]\n        index = ly.index(min(ly))\n        return [x[index + 5] * 1.], [y[index + 5] * 1.]\n    else:\n        return [], []\n", "from numpy.polynomial.polynomial import polyfit\n\ndef interpolate(x, y, u, v):\n    nx = []\n    ny = []\n    for i in range(len(x) - 1):\n        nx.append(x[i])\n        ny.append(y[i])\n        d = round(v[i + 1] - v[i])\n        if d > 1:\n            sx = (x[i + 1] - x[i]) / d\n            sy = (y[i + 1] - y[i]) / d\n            for s in range(1, d):\n                nx.append(x[i] + sx * s)\n                ny.append(y[i] + sy * s)\n    nx.extend(x[-1:])\n    ny.extend(y[-1:])\n    return nx, ny\n\ndef fn(x, y, *args, delta = 80):\n    id = []\n    x, y = interpolate(x, y, *args)\n    for i in range(delta, len(y) - delta, delta):\n        s = y[i:i + delta]\n        id.append(s.index(max(s)) + i)\n    mx, my = [], []\n    for i in id:\n        s = y[i - delta + 1:i + delta]\n        m = s.index(max(s)) + i - delta + 1\n        if i == m:\n            b1, m1 = polyfit(x[i - delta + 1 : i], y[i - delta + 1: i], 1)\n            b2, m2 = polyfit(x[i + 1 : i + delta], y[i + 1 : i + delta], 1)\n            px = (b2 - b1) / (m1 - m2)\n            py = px * m1 + b1\n            mx.append(px)\n            my.append(py)\n    return mx, my"]